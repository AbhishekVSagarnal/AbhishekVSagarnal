//PRIORITY QUEUE IMPLEMENTATION USING LL
#include<stdio.h>
#include<stdlib.h>
struct queue
{
int data,priority;
struct queue *next;
};
struct queue *front=NULL;
void insert()
{
struct queue *temp,*q;
temp=(struct queue *)malloc(sizeof(struct queue));
printf("enter data and priority\n");
scanf("%d %d",&(temp->data),&(temp->priority));
if(front==NULL || temp->priority<front->priority)//Insert at the beginning
{
temp->next=front;
front=temp;
}
else
{
q=front;
while(q->next!=NULL && q->next->priority<=temp->priority)//to find the position
{
q=q->next;
}
temp->next=q->next;
q->next=temp;
}
}
void delete()
{
struct queue *temp;
if(front==NULL)
{
printf("QUEUE is empty\n");
return;
}
else
{
temp=front;
front=front->next;
printf("Deleted Data:%d\n",temp->data);
free(temp);
}
}
void display()
{
struct queue *temp;
if(front==NULL)
{
printf("QUEUE is empty\n");
return;
}
else
{
printf("QUEUE Data\n");
temp=front;
do
{
printf("%d\t",temp->data);
temp=temp->next;
}
while(temp!=NULL);
}
}
int  main()
{
int option;
while(1)
{
printf("1.Insert\n");
printf("2.Delete\n");
printf("3.Display\n");
printf("4.Exit\n");
scanf("%d",&option);
switch(option)
{
case 1:insert();
	break;
case 2:delete();
	break;
case 3:display();
	break;
case 4:return 0;
default:printf("INVALID");
}
}
}
